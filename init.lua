-- tc = {}

-- local function split(pString, pPattern)
--    local Table = {}
--    local fpat = "(.-)" .. pPattern
--    local last_end = 1
--    local s, e, cap = pString:find(fpat, 1)
--    while s do
--       if s ~= 1 or cap ~= "" then
--      table.insert(Table,cap)
--       end
--       last_end = e+1
--       s, e, cap = pString:find(fpat, last_end)
--    end
--    if last_end <= #pString then
--       cap = pString:sub(last_end)
--       table.insert(Table, cap)
--    end
--    return Table
-- end

-- function tc.genCol(cStr)
-- 	if #cStr == 1 then cStr = cStr .. cStr .. cStr end
-- 	return "(tc_.png\\^[colorize\\:#" .. cStr .. ")"
-- end

-- local function genImg(data)
-- 	local stime = minetest.get_us_time()
-- 	print("Starting texture generation.")

-- 	local width = #split(data[1], "\|")
-- 	local str = "[combine:" .. width .. "x" .. #data 
-- 	--Set width and height
	
-- 	for i = 1, #data do
-- 		local row = split(data[i], "\|")
-- 		for j = 1, #row do
-- 			--Color pixels
-- 			str = str .. ":"..(j-1)..","..(i-1).."="..tc.genCol(row[j])
-- 		end
-- 	end

-- 	print("Generated " .. width .. "x" .. #data .. " texture in " .. (minetest.get_us_time() - stime) .. " microseconds")
-- 	return str
-- end

-- minetest.register_node('tc:test_node', {
-- 	drawtype = "normal",
-- 	tiles = {
-- 		genImg({
-- 			"0|0|0|0|5|5|5|5|9|9|9|9|C|C|C|C|",
-- 			"5|5|5|5|9|9|9|9|C|C|C|C|0|0|0|0|",
-- 			"9|9|9|9|C|C|C|C|0|0|0|0|5|5|5|5|",
-- 			"C|C|C|C|0|0|0|0|5|5|5|5|9|9|9|9|",
-- 		})
-- 	},
-- 	description = "Test Node"
-- })

-- minetest.register_node('tc:test_node_2', {
-- 	drawtype = "normal",
-- 	tiles = {
-- 		genImg({"e8e7c5|e8e7c5|e8e7c5|e6dfba|e6dfba|e6dfba|dfdcaf|c7b68a|eff0cf|eff0cf|e8eac6|e8eac6|e8e7c5|e8e7c5|e8e7c5|e7e3bc|",
-- "ddd6ac|ddd6ac|ddd6ac|ddd6ac|ddd6ac|d8d0a7|d8d0a7|cabd94|e6dfba|d5ca9d|d5ca9d|cab98a|d1c194|d6cca1|ddd6ac|d5ca9d|",
-- "d1c599|d1c399|d5ca9d|d5ca9d|dad1a7|d4cc9e|d4c596|c7b68a|dedab3|d8d0a7|dfd9af|dedab3|e5ddb6|d4c596|c8ba8b|d1c399|",
-- "bfaf7f|bfa57f|bfa57f|bfa57f|bfaf7f|bfaa7f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|",
-- "dad3aa|dfd9af|c8ba8b|e6dfba|dfd5af|d5ca9d|d1c194|d5ca9d|d5ca9d|ddd6ac|dad1a7|d0c39f|dfddaf|e2deb4|e5ddb6|dfdcaf|",
-- "d4c89e|ccbd8c|d0c18d|d1c194|d5ca9d|dedab3|dedab3|dedab3|ddd6ac|ddd6ac|d5ca9d|cabc94|dad3aa|d1c394|d1c599|d1c394|",
-- "d4cc9e|d1c599|cfc294|d5ca9d|d5ca9d|d5ca9d|d4c596|d4c596|d4cc9e|d3c59a|d4c596|c7b68a|cabd8a|cab98a|c8ba8b|ccbe8c|",
-- "bfaf7f|bfa57f|bfa57f|bfaf7f|bfaf7f|bfaa7f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfaf7f|bfaf7f|",
-- "d9d1a3|c7b68a|ecf0d1|eaefcb|ecefcb|ecefcb|e8e8c5|e8e8c5|e6e5bd|e6e5bd|e6e1ba|dfd8af|d6caa1|ddd6ac|dfdaaf|d8d0a7|",
-- "cfc394|cabd94|e6dfba|ddd6ac|d8d0a7|ddd6ac|ddd6ac|d5ca9d|d4c89e|d1c194|d0c18d|d1c599|dfd8af|dfd8af|cfc294|d1c599|",
-- "ccc18c|cabd94|d5ca9d|dacfa7|ddd6ac|dad1a7|d8d0a7|d5ca9d|dfd9af|e6e1ba|ddd8ac|dacfa7|d3c59a|d1c599|d9cca3|cfc294|",
-- "bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfaf7f|bfaf7f|bfaf7f|bfaf7f|bfa57f|bfa57f|bfaf7f|",
-- "e6dfba|e6dfba|e2deb4|e2deb4|dfd9af|d4cc9e|cabd94|dfd8af|dfd9af|dfd9af|dfd9af|dfd8af|dedcb3|dfd8af|d9cca3|dddaac|",
-- "d1c194|d5ca9d|ddd6ac|ddd6ac|ddd6ac|d5ca9d|cabd94|dfd8af|d9d1a3|d3c59a|d4c89e|d6cca1|d9cfa3|dfd8af|dfdcaf|d6cca1|",
-- "e6dfba|ded6b3|dfd4af|d4c596|d4c596|d5ca9d|c7b68a|d9cfa3|cfc394|cfc294|d1c599|cfc294|cfc294|cab98a|d4c596|d5ca9d|",
-- "bfa57f|bfa57f|bfa57f|bfaf7f|bfaf7f|bfaa7f|bfaa7f|bfaf7f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfa57f|bfaf7f|bfaf7f|",})
-- 	},
-- 	description = "Test Node"
-- })

-- minetest.register_node('tc:test_node_3', {
-- 	drawtype = "normal",
-- 	tiles = {
-- 		genImg({"3d3021|2b231a|392e1f|403529|584939|504234|4e4032|43382b|584939|40352a|524435|514335|393025|362d21|3d3021|3d3021|",
-- "3f3323|493d2e|64533e|9d7959|9d7959|a78563|9d7959|a78563|ae8d70|a78563|ae8d70|9d7959|9d7959|605144|382f23|2d241a|",
-- "463a24|6e6047|9d7959|a78563|7f6449|745b42|7d6145|816447|7d6145|7d6145|745b42|83684d|ae8d70|9d7959|5c4d3e|392e1f|",
-- "403529|9d7959|a78563|83664d|795f45|896f55|9f7d5b|a78563|a78563|8e6d50|886d52|745b42|7c6146|9e7e5d|9d7959|403529|",
-- "584939|9d7959|83684d|745b42|927558|9d7959|7a5f44|6c553e|785d42|7a6148|977455|8f7357|745b42|82674c|9d7959|584939|",
-- "504234|9d7959|745b42|876c51|9d7959|7b5d43|8a6c54|a78563|9d7959|886b52|765a42|9d7959|846a50|745b42|a08266|504234|",
-- "4e4032|a78563|7d6145|9d7959|87674b|886b52|9d7959|8a6a4e|8e6e52|a68462|8a6d54|7a6148|977455|745b42|9a7b5b|4e4032|",
-- "43382b|ae8d70|7d6145|a78563|795e43|9d7959|8a6a4e|a78563|917053|86664a|9f7a59|816447|a78563|745b42|a78563|43382b|",
-- "584939|8e6d50|816447|9d7959|816447|a78563|8d6d51|927354|9d7959|7a5f44|9d7959|745b42|a78563|745b42|9d7959|584939|",
-- "40352a|8e6d50|7d6145|a78563|7d6349|886b52|9d7959|86684a|7a5f44|a68462|886b52|785f46|9d7959|816447|9d7959|40352a|",
-- "524435|9d7959|7c6044|8c7258|9d7959|7f6147|866950|a78563|9d7959|866950|7d6047|9d7959|826950|745b42|a78563|524435|",
-- "514335|9d7959|83684d|745b42|927558|a07f5e|7a6148|816447|745b42|7a6148|9d7959|8c7258|745b42|896f55|9d7959|514335|",
-- "393025|9d7959|a78563|7b6147|745b42|886d52|9d7959|a78563|9d7959|9d7959|826950|745b42|7d6349|ae8d70|9d7959|393025|",
-- "392e1f|524233|a78563|ae8d70|83684d|745b42|816447|816447|7d6145|7d6145|745b42|866b50|a78563|9d7959|57483a|332a1d|",
-- "2b231a|332a1d|514132|9d7959|9d7959|a78563|a78563|ae8d70|ae8d70|a78563|a78563|9d7959|9d7959|55483e|3b3227|3d3021|",
-- "3d3021|3d3021|332a1d|403529|584939|504234|4e4032|43382b|584939|40352a|524435|514335|393025|392e1f|292219|3d3021|",})
-- 	},
-- 	description = "Test Node"
-- })